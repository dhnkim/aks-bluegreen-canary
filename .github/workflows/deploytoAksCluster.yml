on: [push]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    
    - uses: azure/docker-login@v1
      with:
        login-server: miniprojectacr.azurecr.io
        username: ${{ secrets.acr_miniprojectacr_username }}
        password: ${{ secrets.acr_miniprojectacr_password }}
    
#     - name: Build and push image to ACR
#       id: build-image
#       run: |
#         docker build "$GITHUB_WORKSPACE/nginx-html" -f  "nginx-html/Dockerfile" -t miniprojectacr.azurecr.io/greenblue:${{ github.sha }} --label dockerfile-path=nginx-html/Dockerfile
#         docker push miniprojectacr.azurecr.io/greenblue:${{ github.sha }}

    - name: Build and push image to ACR(Green)
      id: Green-build-image
      run: |
        docker build "$GITHUB_WORKSPACE/nginx-html" -f  "nginx-html/Dockerfile" -t miniprojectacr.azurecr.io/green-nginx:1 --label dockerfile-path=nginx-html/Dockerfile
        docker push miniprojectacr.azurecr.io/green-nginx:1
        
    - name: Build and push image to ACR(Blue)
      id: Blue-build-image
      run: |
        docker build "$GITHUB_WORKSPACE/nginx-html" -f  "nginx-html/Dockerfile" -t miniprojectacr.azurecr.io/blue-nginx:1 --label dockerfile-path=nginx-html/Dockerfile
        docker push miniprojectacr.azurecr.io/blue-nginx:1
    
    - uses: azure/k8s-set-context@v1
      with:
         kubeconfig: ${{ secrets.aks_greenblue_kubeConfig }}
      id: login
    
    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep greenblue | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace greenblue`
        fi

    - uses: azure/k8s-create-secret@v1
      with:
        namespace: greenblue
        container-registry-url: miniprojectacr.azurecr.io
        container-registry-username: ${{ secrets.acr_miniprojectacr_username }}
        container-registry-password: ${{ secrets.acr_miniprojectacr_password }}
        secret-name: greenbluedockerauth
    
    - name: Deploy app
      uses: azure/k8s-deploy@v1.3
      with:
        namespace: greenblue
        manifests: |
          ./kubernetes/service.yaml
          ./kubernetes/blue-deploy.yaml
        images: |
          miniprojectacr.azurecr.io/green-nginx:1
        imagepullsecrets: |
          greenbluedockerauth
          
        strategy: blue-green
        traffic-split-method: pod
        action: deploy  
        
  approveapp:
     runs-on: ubuntu-latest
     needs: build-and-deploy
     environment: akspromotion
     steps:
       - run: echo asked for approval      


  promotereject:
    runs-on: ubuntu-latest
    needs: approveapp
    steps:
      - uses: actions/checkout@v2

      - name: Set cluster context
        uses: azure/aks-set-context@v1
        
      - uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.aks_greenblue_kubeConfig }}
        id: login   
        
      - name: Promote App
        uses: azure/k8s-deploy@v1.3
        if: ${{ success() }}
        with:
          namespace: default
          manifests: |
            ./kubernetes/service.yaml
            ./kubernetes/green-deploy.yaml
          images: |
            miniprojectacr.azurecr.io/green-nginx:1
          strategy: blue-green
          traffic-split-method: pod
          action: promote  #deploy is the default; we will later use this to promote/reject

      - name: Reject App
        uses: azure/k8s-deploy@v1.3
        if: ${{ failure() }}
        with:
          namespace: default
          manifests: |
            ./kubernetes/service.yaml
            ./kubernetes/blue-deploy.yaml
          images: |
            miniprojectacr.azurecr.io/green-nginx:1
          strategy: blue-green
          traffic-split-method: pod
          action: reject  #deploy is the default; we will later use this to promote/reject
          
          
